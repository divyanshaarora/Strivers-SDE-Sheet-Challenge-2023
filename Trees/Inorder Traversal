# Inorder Traversal

## Method 1 - Iterative/Using Stack

# Complexity
- Time complexity: O(N)
<!-- Add your time complexity here, e.g. $$O(n)$$ -->

- Space complexity: O(N)
<!-- Add your space complexity here, e.g. $$O(n)$$ -->

# Code
```
vector<int> getInOrderTraversal(TreeNode *root)
{
    TreeNode *node = root;
    stack<TreeNode *>st;
    vector<int>ans;
    while(true){
        if(node!=NULL){
            st.push(node);
            node=node->left;
        }
        else{
            if(st.empty())break;
            else{
                node = st.top();
                st.pop();
                ans.push_back(node->data);
                node = node->right;
            }
        }
    }
    return ans;
    // Write your code here.
}
```
